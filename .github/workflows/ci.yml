name: CI
on: [pull_request]
env:
  CFLAGS: -Werror
  tag: v1.8
jobs:
  linux-build-and-test:
    name: Build and test (linux:${{ matrix.os }}, ${{ matrix.arch }}, ${{ matrix.compiler }})
    strategy:
      matrix:
        os: [ubuntu-latest]
        compiler: [gcc]
        arch: [x86-64,i686 -m32 -fno-pic]
    runs-on: ${{ matrix.os }}
    env:
      CC: ${{ matrix.compiler }}
      CFLAGS: -Werror -march=${{ matrix.arch }}
    steps:
    - uses: actions/checkout@v2
      name: Checkout libdeflate
      with:
        repository: 'ebiggers/libdeflate'
        ref: ${{ env.tag }}
    - name: Install dependencies
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y clang llvm libz-dev valgrind gcc-multilib lib32z1-dev libc6-dbg:i386
    - name: Run tests
      run: scripts/run_tests.sh
  other-arch-build-and-test:
    name: Build and test (${{ matrix.arch }}, Debian Buster, ${{ matrix.compiler }})
    strategy:
      matrix:
        arch: [armv6, armv7, aarch64]
        compiler: [gcc]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout libdeflate
        with:
          repository: 'ebiggers/libdeflate'
          ref: ${{ env.tag }}
      - uses: uraimo/run-on-arch-action@v2.0.5
        with:
          arch: ${{ matrix.arch }}
          distro: buster
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y build-essential clang llvm libz-dev valgrind
          run: |
            # Valgrind and ASAN crash on at least s390x, ppc64le, and aarch64
            # here.  (It's probably something related to the QEMU user-mode
            # emulation that run-on-arch-action uses.)
            export SKIP_VALGRIND=1
            export SKIP_ASAN=1

            case ${{ matrix.arch }} in
            s390x)
              # On s390x, in freestanding builds the shared library links to an
              # external symbol __clzdi2, even when -static-libgcc is used.
              export SKIP_FREESTANDING=1
              ;;
            aarch64)
              # "ldd: exited with unknown exit code (139)"
              if [ ${{ matrix.compiler }} = clang ]; then
                export SKIP_SHARED_LIB=1
              fi
              ;;
            esac

            export CC=${{ matrix.compiler }}
            scripts/run_tests.sh
  macos-build-and-test:
    name: Build and test (macOS, x86_64)
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      name: Checkout libdeflate
      with:
        repository: 'ebiggers/libdeflate'
        ref: ${{ env.tag }}
    - run: make all check
  macos-aarch64-build-and-test:
    name: Build and test (macOS, aarch64)
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v2
      name: Checkout libdeflate
      with:
        repository: 'ebiggers/libdeflate'
        ref: ${{ env.tag }}
    - run: make all check
  windows-build-and-test:
    name: Build and test (Windows)
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      name: Checkout libdeflate
      with:
        repository: 'ebiggers/libdeflate'
        ref: ${{ env.tag }}
    - shell: bash
      run: |
        PATH="C:\\msys64\\mingw64\\bin:C:\\msys64\\usr\\bin:$PATH" \
          make CC=gcc all check
  cross-compile-for-windows:
    name: Cross compile for Windows
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      name: Checkout libdeflate
      with:
        repository: 'ebiggers/libdeflate'
        ref: ${{ env.tag }}
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64-i686 gcc-mingw-w64-x86-64 libz-mingw-w64-dev
    - name: 32-bit build
      run: make CC=i686-w64-mingw32-gcc -e libdeflate.dll
    - name: 64-bit build
      run: make CC=x86_64-w64-mingw32-gcc -e libdeflate.dll